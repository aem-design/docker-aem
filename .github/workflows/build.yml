name: build

on: [push]

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: docker.io
      DOCKER_REGISTRY_INDEX: index.docker.io/aemdesign
      ORGANISATION_NAME: aemdesign
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      GOOGLE_DRIVEID_AEM: ${{ secrets.GOOGLE_DRIVEID_SDK_2023_9_13665 }}
      GOOGLE_DRIVEID_AEM_FORMS: ${{ secrets.GOOGLE_DRIVEID_SDK_2023_9_13665 }}
      GOOGLE_DRIVEID_AEM_VERSION: "2023.9.13665.20230927T063259Z-230800"
      GOOGLE_FORMS_PACKAGE_NAME: "aem-forms-addon-2023.09.11.00-230800.far"
      CREDS_ADOBE: ${{ secrets.CREDS_ADOBE }}
      PACKAGE_PATH: "./packages"
      JAR_PATH: "./jar"
      PYTHON_VERSION: '3.10'


    steps:
      - name: Experimental Status
        run: |
          docker version -f '{{.Server.Experimental}}'
      - name: Docker
        run: |
          docker version -f '{{.Server.Experimental}}'
          export DOCKER_CLI_EXPERIMENTAL=enabled
          docker version -f '{{.Server.Experimental}}'
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'
          sudo rm /etc/docker/daemon.json
          echo $'{\n    "experimental": true\n}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'
      - uses: actions/checkout@v2
      - name: set up python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: set envirnment variables and get packages
        id: config
        run: |
          echo GET PACKAGES
          export PACKAGE_PATH=$(pwd)/packages
          echo "{PACKAGE_PATH}={PACKAGE_PATH}" >> $GITHUB_ENV
          source <(curl -sL https://github.com/aem-design/aemdesign-docker/releases/latest/download/github_get_config.sh)
          source <(curl -sL https://github.com/aem-design/aemdesign-docker/releases/latest/download/download-gdrive.sh)
          echo $PACKAGE_PATH
          echo $JAR_PATH
          if [[ ! -d $PACKAGE_PATH ]]; then mkdir $PACKAGE_PATH; fi
          if [[ ! -d $JAR_PATH ]]; then mkdir $JAR_PATH; fi
          echo PACKAGES CONTENTS $PACKAGE_PATH
          ls -latr $PACKAGE_PATH
          echo DOWNLOAD JAR INTO ${JAR_PATH}
          downloadGDrive "download" "$GOOGLE_DRIVEID_AEM" "$JAR_PATH/aem-quickstart.jar"
          echo DOWNLOAD PACKAGES INTO ${PACKAGE_PATH}
          # ============================================
          # PACKAGE INSTALL
          # ============================================
          export PACKAGE_CKECK_COUNT=0
          # --------------------------------------------
          #downloadGDrive "download" "${GOOGLE_DRIVEID_AEM_FORMS}" "$PACKAGE_PATH/01-${GOOGLE_FORMS_PACKAGE_NAME}"
          # ./scripts/download.sh "$PACKAGE_PATH/02-" "-" "githublatest:.*core.wcm.components.all.*.zip" "https://api.github.com/repos/adobe/aem-core-wcm-components/releases/latest"
          # ./scripts/download.sh "$PACKAGE_PATH/03-" "-" "githublatest:.*acs-aem-commons-content-[0-9\.]+.zip" "https://api.github.com/repos/Adobe-Consulting-Services/acs-aem-commons/releases/latest"
          # ./scripts/download.sh "$PACKAGE_PATH/04-" "-" "-" "https://repo1.maven.org/maven2/biz/netcentric/cq/tools/accesscontroltool/accesscontroltool-package/3.0.2/accesscontroltool-package-3.0.2-cloud.zip"
          # ./scripts/download.sh "$PACKAGE_PATH/05-" "-" "-" "https://repo1.maven.org/maven2/biz/netcentric/cq/tools/accesscontroltool/accesscontroltool-oakindex-package/3.0.2/accesscontroltool-oakindex-package-3.0.2-cloud.zip"
          # ./scripts/download.sh "$PACKAGE_PATH/06-" "-" "githublatest:.*aemdesign-aem-core-deploy.*.zip" "https://api.github.com/repos/aem-design/aemdesign-aem-core/releases/latest"
          # ./scripts/download.sh "$PACKAGE_PATH/07-" "-" "githublatest:.*aemdesign-aem-support-deploy.*.zip" "https://api.github.com/repos/aem-design/aemdesign-aem-support/releases/latest"
          # --------------------------------------------
          echo "{PACKAGE_CKECK_COUNT}={PACKAGE_CKECK_COUNT}" >> $GITHUB_ENV
          echo ::set-output name=PACKAGE_CKECK_COUNT::$PACKAGE_CKECK_COUNT
          echo PACKAGE COUNT=$PACKAGE_CKECK_COUNT
          ls -latr $PACKAGE_PATH
          source <(curl -sL https://github.com/aem-design/aemdesign-docker/releases/latest/download/github_get_version.sh)

      - name: build and test docker image
        run: |
          docker build --build-arg AEM_VERSION="${GOOGLE_DRIVEID_AEM_VERSION}" --pull --squash -t $IMAGE:$GIT_BRANCH .
          (cd test && bash ./run_tests.sh "$IMAGE:$GIT_BRANCH" "$PACKAGE_CKECK_COUNT")
          docker images
        env:
          PACKAGE_CKECK_COUNT: ${{ steps.config.outputs.PACKAGE_CKECK_COUNT }}

      - name: login to docker registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${DOCKER_REGISTRY} -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: push image version
        run: |
          docker push $IMAGE:$GIT_BRANCH
      - name: push latest image on master
        if: github.ref == 'refs/heads/master'
        run: |
          docker tag $IMAGE:$GIT_BRANCH $IMAGE:latest
          docker push $IMAGE:latest

      - name: update registry description with readme on master
        if: github.ref == 'refs/heads/master'
        run: |
          docker run --rm -v $(pwd):/data/ aemdesign/dockerhub-description "$DOCKER_USERNAME" "$DOCKER_PASSWORD" "$IMAGE"

      - name: create release ${{ env.GITHUB_TAG }}
        if: github.ref == 'refs/heads/master'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GITHUB_TAG }}
          release_name: ${{ env.GITHUB_TAG }}
          body: ${{ steps.config.outputs.GIT_RELEASE_NOTES }}
          draft: false
          prerelease: false
